---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import FilterSection from '../components/FilterSection.astro';
import { locationStore } from '../store/locationStore';

// Sayfa yüklenirken ihtiyaç duyulan verileri hazırla
const cities = locationStore.getCities();
const types = locationStore.getTypes();
---

<Layout title="Sağlık Kurumları Rehberi">
  <Header />
  
  <main class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
    <FilterSection />
    
    <div id="locationsList" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      <div class="col-span-full text-center py-10 text-gray-500">
        Lütfen arama yapmak için yukarıdaki filtreleri kullanın
      </div>
    </div>
  </main>
</Layout>

<script>
  import { locationStore } from '../store/locationStore';
  import { formatLocationCard, throttle } from '../utils/locationUtils';

  class LocationManager {
    constructor() {
      this.locationsList = document.getElementById('locationsList');
      this.citySelect = document.getElementById('city');
      this.districtSelect = document.getElementById('district');
      this.typeSelect = document.getElementById('type');
      this.contractSelect = document.getElementById('contract');
      this.resetButton = document.getElementById('resetFilters');

      this.initializeEventListeners();
      this.filterLocations(); // İlk yükleme için
    }

    initializeEventListeners() {
      const throttledFilter = throttle(() => this.filterLocations(), 100);

      this.citySelect?.addEventListener('change', (e) => {
        const selectedCity = e.target.value;
        this.updateDistricts(selectedCity);
        throttledFilter();
      });

      this.districtSelect?.addEventListener('change', throttledFilter);
      this.typeSelect?.addEventListener('change', throttledFilter);
      this.contractSelect?.addEventListener('change', throttledFilter);
      
      this.resetButton?.addEventListener('click', () => {
        this.resetFilters();
        this.filterLocations();
      });
    }

    updateDistricts(selectedCity) {
      if (!this.districtSelect) return;

      this.districtSelect.innerHTML = '<option value="">Tümü</option>';
      
      if (selectedCity) {
        const districts = locationStore.getDistrictsByCity(selectedCity);
        districts.forEach(district => {
          const option = document.createElement('option');
          option.value = district;
          option.textContent = district;
          this.districtSelect.appendChild(option);
        });
        this.districtSelect.disabled = false;
      } else {
        this.districtSelect.disabled = true;
      }
    }

    resetFilters() {
      if (!this.citySelect || !this.districtSelect || !this.typeSelect || !this.contractSelect) return;

      this.citySelect.value = '';
      this.districtSelect.value = '';
      this.districtSelect.disabled = true;
      this.typeSelect.value = '';
      this.contractSelect.value = '';
    }

    filterLocations() {
      if (!this.locationsList) return;

      const selectedCity = this.citySelect?.value;
      const selectedDistrict = this.districtSelect?.value;
      const selectedType = this.typeSelect?.value;
      const selectedContract = this.contractSelect?.value;

      if (!selectedCity && !selectedDistrict && !selectedType && selectedContract === '') {
        this.showMessage('Lütfen arama yapmak için yukarıdaki filtreleri kullanın');
        return;
      }

      const locations = locationStore.getLocations();
      const filteredLocations = locations.filter(location => {
        if (selectedCity && location.city !== selectedCity) return false;
        if (selectedDistrict && location.district !== selectedDistrict) return false;
        if (selectedType && location.type !== selectedType) return false;
        if (selectedContract !== '') {
          return location.contract === (selectedContract === 'true');
        }
        return true;
      });

      this.updateLocationsList(filteredLocations);
    }

    showMessage(message) {
      if (!this.locationsList) return;
      
      this.locationsList.innerHTML = `
        <div class="col-span-full text-center py-10 text-gray-500">
          ${message}
        </div>
      `;
    }

    updateLocationsList(filteredLocations) {
      if (!this.locationsList) return;

      if (filteredLocations.length === 0) {
        this.showMessage('Seçili kriterlere uygun sonuç bulunamadı');
        return;
      }

      const fragment = document.createDocumentFragment();
      
      filteredLocations.forEach(location => {
        const div = document.createElement('div');
        div.className = 'bg-white rounded-lg shadow-sm p-4 hover:shadow-md transition-shadow';
        div.innerHTML = formatLocationCard(location);
        fragment.appendChild(div);
      });

      this.locationsList.innerHTML = '';
      this.locationsList.appendChild(fragment);
    }
  }

  // Sayfa yüklendiğinde Location Manager'ı başlat
  new LocationManager();
</script>
